[{"/Users/zan/Desktop/projects/watchtower/client/src/index.js":"1","/Users/zan/Desktop/projects/watchtower/client/src/reportWebVitals.js":"2","/Users/zan/Desktop/projects/watchtower/client/src/App.js":"3","/Users/zan/Desktop/projects/watchtower/client/src/pages/Community.js":"4","/Users/zan/Desktop/projects/watchtower/client/src/pages/Dashboard.js":"5","/Users/zan/Desktop/projects/watchtower/client/src/components/Header.js":"6","/Users/zan/Desktop/projects/watchtower/client/src/pages/Login.js":"7","/Users/zan/Desktop/projects/watchtower/client/src/pages/DataUpload.js":"8","/Users/zan/Desktop/projects/watchtower/client/src/components/DeviceCard.js":"9","/Users/zan/Desktop/projects/watchtower/client/src/utils/mutations.js":"10","/Users/zan/Desktop/projects/watchtower/client/src/utils/queries.js":"11","/Users/zan/Desktop/projects/watchtower/client/src/utils/auth.js":"12"},{"size":500,"mtime":1618849540103,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1618849540103,"results":"15","hashOfConfig":"14"},{"size":1117,"mtime":1619573067166,"results":"16","hashOfConfig":"14"},{"size":1482,"mtime":1619573067168,"results":"17","hashOfConfig":"14"},{"size":460,"mtime":1619577707289,"results":"18","hashOfConfig":"14"},{"size":1797,"mtime":1619573067166,"results":"19","hashOfConfig":"14"},{"size":1919,"mtime":1619573067169,"results":"20","hashOfConfig":"14"},{"size":1469,"mtime":1619578253887,"results":"21","hashOfConfig":"14"},{"size":1600,"mtime":1619578840632,"results":"22","hashOfConfig":"14"},{"size":1184,"mtime":1619573067170,"results":"23","hashOfConfig":"14"},{"size":1407,"mtime":1619573067170,"results":"24","hashOfConfig":"14"},{"size":1492,"mtime":1619573067170,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"10evtp",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/zan/Desktop/projects/watchtower/client/src/index.js",[],["53","54"],"/Users/zan/Desktop/projects/watchtower/client/src/reportWebVitals.js",[],"/Users/zan/Desktop/projects/watchtower/client/src/App.js",[],"/Users/zan/Desktop/projects/watchtower/client/src/pages/Community.js",["55","56","57","58"],"import React, { useState, useEffect } from \"react\"\nimport { useMutation, useQuery } from \"@apollo/react-hooks\"\nimport { ADD_POST } from \"../utils/mutations\"\nimport { QUERY_POSTS } from '../utils/queries';\n\nconst dummyPostData = [{ username: \"John Doe\", postText: \"john doe says Hello World\" }, { username: \" Jane Doe\", postText: \"Jane says hello world\" }]\nfunction Community() {\n    const { loading, data } = useQuery(QUERY_POSTS);\n    const posts = dummyPostData;//TODO:remove dummbyPostData and replace with real data \n\n    const [addPost, { err }] = useMutation(ADD_POST,\n        {\n            refetchQueries: [\n                { query: QUERY_POSTS }\n            ]\n        })\n    /* using refetch becuase you want to keep the data on the- \n     * page and the data from the server in sync \n     */\n\n    const [newPost, setNewPost] = useState(\"\")\n    const handleNewPost = (e) => {\n        addPost({ variables: { postText: newPost } }).then(res => {\n            console.log(res)\n            setNewPost(\"\")\n        })\n    }\n    return (\n        <div>\n            {posts.map(post => (\n                <div>\n                    <h1>{post.username}</h1>\n                    <h1>{post.postText}</h1>\n                </div>\n            ))}\n            <input value={newPost} onChange={e => setNewPost(e.target.value)}>\n            </input>\n            <button onClick={handleNewPost}>\n                Add Post\n                </button>\n        </div >\n    );\n}\nexport default Community;","/Users/zan/Desktop/projects/watchtower/client/src/pages/Dashboard.js",[],"/Users/zan/Desktop/projects/watchtower/client/src/components/Header.js",[],"/Users/zan/Desktop/projects/watchtower/client/src/pages/Login.js",[],"/Users/zan/Desktop/projects/watchtower/client/src/pages/DataUpload.js",["59"],"import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_DATA } from '../utils/mutations';\n\nfunction DataUpload() {\n\n    //load mutation function\n    const [addData, {error} ] = useMutation(ADD_DATA);\n\n    //get data from url and sort it\n    let info = window.location.href;\n    let data = info.split('?')[1];\n    let sortedData = data.split('&');\n\n    //sort data into variable names\n    let sensorName = sortedData[0].split('=')[1];\n    let measurement = parseInt(sortedData[1].split('=')[1]);\n    let units = sortedData[2].split('=')[1];\n\n    console.log(sensorName, measurement, units);\n\n    //mutation to post data to server\n    const dataSubmit = async () => {\n\n        try {\n            const mutationResponse = await addData({\n                variables: {\n                    sensorName: sensorName,\n                    measurement: measurement,\n                    units: units\n                }\n            });\n\n            if (error) {\n                throw new Error('something went wrong');\n            };\n\n            console.log(mutationResponse);\n\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    //run mutation function once on page load\n    useEffect(() => {\n\n        dataSubmit(sortedData);\n\n    }, []);\n\n\n    return (\n        <>\n            <h1>Sensor Name: {sensorName}</h1>\n            <h1>Measurement: {measurement} {units}</h1>\n        </>\n    )\n\n}\n\nexport default DataUpload","/Users/zan/Desktop/projects/watchtower/client/src/components/DeviceCard.js",["60"],"/Users/zan/Desktop/projects/watchtower/client/src/utils/mutations.js",[],"/Users/zan/Desktop/projects/watchtower/client/src/utils/queries.js",[],"/Users/zan/Desktop/projects/watchtower/client/src/utils/auth.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":27,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"69","line":8,"column":13,"nodeType":"67","messageId":"68","endLine":8,"endColumn":20},{"ruleId":"65","severity":1,"message":"70","line":8,"column":22,"nodeType":"67","messageId":"68","endLine":8,"endColumn":26},{"ruleId":"65","severity":1,"message":"71","line":11,"column":23,"nodeType":"67","messageId":"68","endLine":11,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":50,"column":8,"nodeType":"74","endLine":50,"endColumn":10,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":69,"column":14,"nodeType":"78","endLine":69,"endColumn":18},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'data' is assigned a value but never used.","'err' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dataSubmit' and 'sortedData'. Either include them or remove the dependency array.","ArrayExpression",["81"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [dataSubmit, sortedData]",{"range":"84","text":"85"},[1288,1290],"[dataSubmit, sortedData]"]