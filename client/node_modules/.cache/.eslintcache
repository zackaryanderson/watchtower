[{"/Users/gavinasay/Projects/watchtower/client/src/index.js":"1","/Users/gavinasay/Projects/watchtower/client/src/App.js":"2","/Users/gavinasay/Projects/watchtower/client/src/reportWebVitals.js":"3","/Users/gavinasay/Projects/watchtower/client/src/components/Header.js":"4","/Users/gavinasay/Projects/watchtower/client/src/pages/Community.js":"5","/Users/gavinasay/Projects/watchtower/client/src/pages/Login.js":"6","/Users/gavinasay/Projects/watchtower/client/src/pages/DataUpload.js":"7","/Users/gavinasay/Projects/watchtower/client/src/pages/Dashboard.js":"8","/Users/gavinasay/Projects/watchtower/client/src/components/DeviceCard.js":"9","/Users/gavinasay/Projects/watchtower/client/src/utils/mutations.js":"10","/Users/gavinasay/Projects/watchtower/client/src/utils/auth.js":"11","/Users/gavinasay/Projects/watchtower/client/src/utils/queries.js":"12"},{"size":500,"mtime":1619142131048,"results":"13","hashOfConfig":"14"},{"size":1117,"mtime":1619682505078,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1619142131049,"results":"16","hashOfConfig":"14"},{"size":1797,"mtime":1619682505079,"results":"17","hashOfConfig":"14"},{"size":1482,"mtime":1619682505080,"results":"18","hashOfConfig":"14"},{"size":1919,"mtime":1619682505081,"results":"19","hashOfConfig":"14"},{"size":1469,"mtime":1619682505081,"results":"20","hashOfConfig":"14"},{"size":460,"mtime":1619682505080,"results":"21","hashOfConfig":"14"},{"size":1600,"mtime":1619682505079,"results":"22","hashOfConfig":"14"},{"size":1184,"mtime":1619682505082,"results":"23","hashOfConfig":"14"},{"size":1492,"mtime":1619682505082,"results":"24","hashOfConfig":"14"},{"size":1407,"mtime":1619682505082,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lqxft4",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gavinasay/Projects/watchtower/client/src/index.js",[],"/Users/gavinasay/Projects/watchtower/client/src/App.js",[],"/Users/gavinasay/Projects/watchtower/client/src/reportWebVitals.js",[],"/Users/gavinasay/Projects/watchtower/client/src/components/Header.js",[],"/Users/gavinasay/Projects/watchtower/client/src/pages/Community.js",["53","54","55","56"],"import React, { useState, useEffect } from \"react\"\nimport { useMutation, useQuery } from \"@apollo/react-hooks\"\nimport { ADD_POST } from \"../utils/mutations\"\nimport { QUERY_POSTS } from '../utils/queries';\n\nconst dummyPostData = [{ username: \"John Doe\", postText: \"john doe says Hello World\" }, { username: \" Jane Doe\", postText: \"Jane says hello world\" }]\nfunction Community() {\n    const { loading, data } = useQuery(QUERY_POSTS);\n    const posts = dummyPostData;//TODO:remove dummbyPostData and replace with real data \n\n    const [addPost, { err }] = useMutation(ADD_POST,\n        {\n            refetchQueries: [\n                { query: QUERY_POSTS }\n            ]\n        })\n    /* using refetch becuase you want to keep the data on the- \n     * page and the data from the server in sync \n     */\n\n    const [newPost, setNewPost] = useState(\"\")\n    const handleNewPost = (e) => {\n        addPost({ variables: { postText: newPost } }).then(res => {\n            console.log(res)\n            setNewPost(\"\")\n        })\n    }\n    return (\n        <div>\n            {posts.map(post => (\n                <div>\n                    <h1>{post.username}</h1>\n                    <h1>{post.postText}</h1>\n                </div>\n            ))}\n            <input value={newPost} onChange={e => setNewPost(e.target.value)}>\n            </input>\n            <button onClick={handleNewPost}>\n                Add Post\n                </button>\n        </div >\n    );\n}\nexport default Community;","/Users/gavinasay/Projects/watchtower/client/src/pages/Login.js",[],"/Users/gavinasay/Projects/watchtower/client/src/pages/DataUpload.js",["57"],"import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_DATA } from '../utils/mutations';\n\nfunction DataUpload() {\n\n    //load mutation function\n    const [addData, {error} ] = useMutation(ADD_DATA);\n\n    //get data from url and sort it\n    let info = window.location.href;\n    let data = info.split('?')[1];\n    let sortedData = data.split('&');\n\n    //sort data into variable names\n    let sensorName = sortedData[0].split('=')[1];\n    let measurement = parseInt(sortedData[1].split('=')[1]);\n    let units = sortedData[2].split('=')[1];\n\n    console.log(sensorName, measurement, units);\n\n    //mutation to post data to server\n    const dataSubmit = async () => {\n\n        try {\n            const mutationResponse = await addData({\n                variables: {\n                    sensorName: sensorName,\n                    measurement: measurement,\n                    units: units\n                }\n            });\n\n            if (error) {\n                throw new Error('something went wrong');\n            };\n\n            console.log(mutationResponse);\n\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    //run mutation function once on page load\n    useEffect(() => {\n\n        dataSubmit(sortedData);\n\n    }, []);\n\n\n    return (\n        <>\n            <h1>Sensor Name: {sensorName}</h1>\n            <h1>Measurement: {measurement} {units}</h1>\n        </>\n    )\n\n}\n\nexport default DataUpload","/Users/gavinasay/Projects/watchtower/client/src/pages/Dashboard.js",[],"/Users/gavinasay/Projects/watchtower/client/src/components/DeviceCard.js",["58"],"import React from 'react';\nimport styled from 'styled-components';\n\nconst CardBox = styled.div`\n\tmax-width: 600px;\n\tpadding: 0.4rem;\n\tmargin: 5px 0;\n\n\t.cardHeader {\n\t\tbackground-color: lightblue;\n\t\tpadding: 0.2rem;\n\t}\n\n\t.cardBody {\n\t\tborder: 3px solid lightblue;\n\t\tpadding: 0.2rem;\n\t}\n`;\n\nfunction DeviceCard({ user }) {\n\n\tconsole.log(user.sensors)\n\n\tconst sensors = user.sensors;\n\tconsole.log(sensors[0].data)\n\n\t//calculate time since last update\n\tconst formattedTime = (time) => {\n\t\tconst now = new Date();\n\n\t\tconst elapsedTime = Math.round((now - time) / (60 * 1000));\n\n\t\treturn elapsedTime;\n\t}\n\n\n\t// //determine units\n\tconst formattedUnits = (units) => {\n\t\tif (units === \"degF\") {\n\t\t\treturn '°F';\n\t\t} else if (units === \"degC\") {\n\t\t\treturn '°C';\n\t\t} else if (units === 'kelvin') {\n\t\t\treturn 'K';\n\t\t} else {\n\t\t\treturn units;\n\t\t}\n\t}\n\n\n\treturn (\n\t\t<div>\n\t\t\t{sensors && sensors.map(sensor => (\n\t\t\t\t<CardBox>\n\t\t\t\t\t<div key={sensor._id} className=\"card\">\n\t\t\t\t\t\t<div className=\"cardHeader\">\n\t\t\t\t\t\t\t<h3>{sensor.sensorName}</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='cardBody'>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{sensor.data.length ?\n\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t<h1>{sensor.data[sensor.data.length - 1].measurement} {formattedUnits(sensor.data[sensor.data.length - 1].units)}</h1>\n\t\t\t\t\t\t\t\t\t) : (<h4>No Data Yet</h4>)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{sensor.data.length ?\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t<h4>Last updated {formattedTime(sensor.data[sensor.data.length - 1].timeStamp)} minutes ago</h4>\n\t\t\t\t\t\t\t\t) : (<h4></h4>)}\n\t\t\t\t\t\t\t<button>View Data</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</CardBox>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default DeviceCard;\n","/Users/gavinasay/Projects/watchtower/client/src/utils/mutations.js",[],"/Users/gavinasay/Projects/watchtower/client/src/utils/auth.js",[],"/Users/gavinasay/Projects/watchtower/client/src/utils/queries.js",[],{"ruleId":"59","severity":1,"message":"60","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"59","severity":1,"message":"63","line":8,"column":13,"nodeType":"61","messageId":"62","endLine":8,"endColumn":20},{"ruleId":"59","severity":1,"message":"64","line":8,"column":22,"nodeType":"61","messageId":"62","endLine":8,"endColumn":26},{"ruleId":"59","severity":1,"message":"65","line":11,"column":23,"nodeType":"61","messageId":"62","endLine":11,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":50,"column":8,"nodeType":"68","endLine":50,"endColumn":10,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":69,"column":14,"nodeType":"72","endLine":69,"endColumn":18},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'data' is assigned a value but never used.","'err' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dataSubmit' and 'sortedData'. Either include them or remove the dependency array.","ArrayExpression",["73"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",{"desc":"74","fix":"75"},"Update the dependencies array to be: [dataSubmit, sortedData]",{"range":"76","text":"77"},[1288,1290],"[dataSubmit, sortedData]"]