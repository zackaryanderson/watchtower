/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Console from './Console';
import Module from './Module';
import Task from './Task';
import { ColorType, ColorPalette } from './types';
export declare const SLOW_THRESHOLD = 10000;
export default class Reporter<Line = string, Options = {}> extends Module<Options> {
    console: Console;
    lines: Line[];
    startTime: number;
    stopTime: number;
    /**
     * Register console listeners.
     */
    bootstrap(): void;
    /**
     * Add a line to be rendered.
     */
    addLine(line: Line): this;
    /**
     * Display an error and it's stack.
     */
    displayError(error: Error): void;
    /**
     * Find a line using a callback
     */
    findLine(callback: (item: Line) => boolean): Line | undefined;
    /**
     * Return specific colors based on chosen theme.
     */
    getColorPalette(): ColorPalette;
    /**
     * Return a specific color for each task status.
     */
    getColorType(task: Task<any>): ColorType;
    /**
     * Calculate the elapsed time and highlight as red if over the threshold.
     */
    getElapsedTime(start: number, stop?: number, highlight?: boolean): string;
    /**
     * Set start time.
     */
    handleBaseStart: () => void;
    /**
     * Set stop time and render.
     */
    handleBaseStop: () => void;
    /**
     * Create an indentation based on the defined length.
     */
    indent(length?: number): string;
    /**
     * Remove a line to be rendered.
     */
    removeLine(callback: (line: Line) => boolean): this;
    /**
     * Create a chalk formatted string with accessible colors and modifiers applied.
     */
    style(message: string, type?: ColorType, modifiers?: ('reset' | 'bold' | 'dim' | 'italic' | 'underline' | 'inverse' | 'hidden')[]): string;
}
