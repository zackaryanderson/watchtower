/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Context from './Context';
import { Status } from './types';
export declare type TaskAction<Ctx extends Context> = (context: Ctx, value: any, task: Task<Ctx, any>) => any | Promise<any>;
export default class Task<Ctx extends Context, Options = {}> {
    action: TaskAction<Ctx> | null;
    context: Ctx;
    options: Options;
    title: string;
    startTime: number;
    status: Status;
    statusText: string;
    stopTime: number;
    tasks: Task<Ctx, any>[];
    constructor(title: string, action?: TaskAction<Ctx> | null, options?: Partial<Options>);
    /**
     * Return true if the task failed when executing.
     */
    hasFailed(): boolean;
    /**
     * Return true if the task executed successfully.
     */
    hasPassed(): boolean;
    /**
     * Return true if the task has not been executed yet.
     */
    isPending(): boolean;
    /**
     * Return true if the task is currently running.
     */
    isRunning(): boolean;
    /**
     * Return true if the task was or will be skipped.
     */
    isSkipped(): boolean;
    /**
     * Run the current task by executing it and performing any before and after processes.
     */
    run<T>(context: Ctx, initialValue?: T): Promise<any>;
    /**
     * Set the context to be passed around.
     */
    setContext(context: Ctx): this;
    /**
     * Mark a task as skipped if the condition is true.
     */
    skip(condition?: boolean): this;
}
