/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
export declare type EventArguments = any[];
export declare type EventListener = (...args: EventArguments) => false | void;
export default class Emitter {
    listeners: {
        [eventName: string]: Set<EventListener>;
    };
    namespace: string;
    /**
     * Create an event name with optional namespace.
     */
    createEventName(name: string): string;
    /**
     * Syncronously execute listeners for the defined event and arguments.
     */
    emit(name: string, args?: EventArguments): this;
    /**
     * Syncronously execute listeners for the defined event and arguments,
     * with the ability to intercept and abort early with a value.
     */
    /**
     * Remove all listeners for the defined event name.
     */
    flushListeners(eventName: string): this;
    /**
     * Return all event names with registered listeners.
     */
    getEventNames(): string[];
    /**
     * Return a set of listeners for a specific event name.
     */
    getListeners(eventName: string): Set<EventListener>;
    /**
     * Remove a listener function from a specific event name.
     */
    off(eventName: string, listener: EventListener): this;
    /**
     * Register a listener function to a specific event name.
     */
    on(eventName: string, listener: EventListener): this;
    /**
     * Set the namespace.
     */
    setEventNamespace(namespace: string): this;
    /**
     * Remove the namespace.
     */
    removeEventNamespace(): this;
}
