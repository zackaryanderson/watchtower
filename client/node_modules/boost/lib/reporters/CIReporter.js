"use strict";
/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Reporter_1 = __importDefault(require("../Reporter"));
var CIReporter = /** @class */ (function (_super) {
    __extends(CIReporter, _super);
    function CIReporter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.taskID = 0;
        _this.handleTask = function (task) {
            // eslint-disable-next-line no-param-reassign
            task.id = _this.taskID;
            _this.taskID += 1;
            _this.console.out("[" + task.id + "] Running task: " + task.title);
        };
        _this.handleTaskPass = function (task) {
            _this.console.out(_this.style("[" + task.id + "] Passed", 'success'));
        };
        _this.handleTaskFail = function (task, error) {
            _this.console.err(_this.style("[" + task.id + "] Failed: " + error.message, 'failure'));
        };
        _this.handleRoutine = function (routine) {
            _this.console.out("[" + routine.key + "] Running routine: " + routine.title);
        };
        _this.handleRoutinePass = function (routine) {
            _this.console.out(_this.style("[" + routine.key + "] Passed", 'success'));
        };
        _this.handleRoutineFail = function (routine, error) {
            _this.console.err(_this.style("[" + routine.key + "] Failed: " + error.message, 'failure'));
        };
        _this.handleStop = function () {
            _this.console.out("Ran in " + _this.getElapsedTime(_this.startTime, _this.stopTime, false));
        };
        return _this;
    }
    CIReporter.prototype.bootstrap = function () {
        _super.prototype.bootstrap.call(this);
        this.console
            .on('stop', this.handleStop)
            .on('task', this.handleTask)
            .on('task.pass', this.handleTaskPass)
            .on('task.fail', this.handleTaskFail)
            .on('routine', this.handleRoutine)
            .on('routine.pass', this.handleRoutinePass)
            .on('routine.fail', this.handleRoutineFail);
    };
    return CIReporter;
}(Reporter_1.default));
exports.default = CIReporter;
