/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Reporter from '../Reporter';
import Routine from '../Routine';
import Task from '../Task';
export declare type Line = {
    depth: number;
    routine: Routine<any>;
    tasks: Task<any>[];
};
export default class DefaultReporter extends Reporter<Line> {
    depth: number;
    keyLength: number;
    bootstrap(): void;
    /**
     * Calculate the max string length for routine key's at every depth.
     */
    calculateKeyLength(routines: Routine<any>[], depth?: number): number;
    /**
     * Calculate the current number of tasks that have completed.
     */
    calculateTaskCompletion(tasks: Task<any>[]): number;
    /**
     * Return the task title with additional metadata.
     */
    getLineTitle(task: Task<any> | Routine<any>, usedColumns?: number): string;
    handleStart: (routines: Routine<any, {}>[]) => void;
    handleCommand: () => void;
    handleTask: (task: Task<any, {}>, routine: Routine<any, {}>) => void;
    handleTaskComplete: (task: Task<any, {}>, routine: Routine<any, {}>) => void;
    handleRender: () => void;
    handleRoutine: (routine: Routine<any, {}>, value: any, wasParallel: boolean) => void;
    handleRoutineComplete: (routine: Routine<any, {}>, result: any, wasParallel: boolean) => void;
    renderLine(routine: Routine<any>, task: Task<any> | null, depth: number): void;
}
