"use strict";
/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var CrashLogger_1 = __importDefault(require("./CrashLogger"));
var Routine_1 = __importDefault(require("./Routine"));
var Tool_1 = __importDefault(require("./Tool"));
var Pipeline = /** @class */ (function (_super) {
    __extends(Pipeline, _super);
    function Pipeline(tool, context) {
        var _this = _super.call(this, 'root', 'Pipeline') || this;
        if (tool instanceof Tool_1.default) {
            tool.initialize();
        }
        else {
            throw new TypeError('A build `Tool` instance is required to operate the pipeline.');
        }
        _this.tool = tool;
        _this.tool.debug('Instantiating pipeline');
        _this.setContext(context);
        return _this;
    }
    /**
     * Execute all routines in order.
     */
    Pipeline.prototype.run = function (initialValue) {
        var _this = this;
        var cli = this.tool.console;
        this.tool.debug('Running pipeline');
        cli.emit('start', [this.routines]);
        return this.serializeRoutines(initialValue)
            .then(function (result) {
            cli.exit(null, 0);
            return result;
        })
            .catch(function (error) {
            cli.exit(error, 1);
            // Create a log of the failure
            new CrashLogger_1.default(_this.tool).log(error);
            return error;
        });
    };
    return Pipeline;
}(Routine_1.default));
exports.default = Pipeline;
