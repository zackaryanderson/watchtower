"use strict";
/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
var Task = /** @class */ (function () {
    function Task(title, action, options) {
        if (action === void 0) { action = null; }
        if (options === void 0) { options = {}; }
        this.action = null;
        this.title = '';
        this.startTime = 0;
        this.status = constants_1.STATUS_PENDING;
        this.statusText = '';
        this.stopTime = 0;
        this.tasks = [];
        if (!title || typeof title !== 'string') {
            throw new Error('Tasks require a title.');
        }
        if (action !== null && typeof action !== 'function') {
            throw new Error('Tasks require an executable function.');
        }
        this.action = action;
        // @ts-ignore
        this.options = __assign({}, options);
        this.status = action ? constants_1.STATUS_PENDING : constants_1.STATUS_SKIPPED;
        this.title = title;
    }
    /**
     * Return true if the task failed when executing.
     */
    Task.prototype.hasFailed = function () {
        return this.status === constants_1.STATUS_FAILED;
    };
    /**
     * Return true if the task executed successfully.
     */
    Task.prototype.hasPassed = function () {
        return this.status === constants_1.STATUS_PASSED;
    };
    /**
     * Return true if the task has not been executed yet.
     */
    Task.prototype.isPending = function () {
        return this.status === constants_1.STATUS_PENDING;
    };
    /**
     * Return true if the task is currently running.
     */
    Task.prototype.isRunning = function () {
        return this.status === constants_1.STATUS_RUNNING;
    };
    /**
     * Return true if the task was or will be skipped.
     */
    Task.prototype.isSkipped = function () {
        return this.status === constants_1.STATUS_SKIPPED;
    };
    /**
     * Run the current task by executing it and performing any before and after processes.
     */
    Task.prototype.run = function (context, initialValue) {
        var _this = this;
        this.setContext(context);
        if (this.isSkipped() || !this.action) {
            this.status = constants_1.STATUS_SKIPPED;
            return Promise.resolve(initialValue);
        }
        this.status = constants_1.STATUS_RUNNING;
        this.startTime = Date.now();
        return (Promise.resolve(initialValue)
            // @ts-ignore
            .then(function (value) { return _this.action(context, value, _this); })
            .then(function (result) {
            _this.status = constants_1.STATUS_PASSED;
            _this.stopTime = Date.now();
            _this.statusText = '';
            return result;
        }, function (error) {
            _this.status = constants_1.STATUS_FAILED;
            _this.stopTime = Date.now();
            throw error;
        }));
    };
    /**
     * Set the context to be passed around.
     */
    Task.prototype.setContext = function (context) {
        this.context = context;
        return this;
    };
    /**
     * Mark a task as skipped if the condition is true.
     */
    Task.prototype.skip = function (condition) {
        if (condition === void 0) { condition = true; }
        if (condition) {
            this.status = constants_1.STATUS_SKIPPED;
        }
        return this;
    };
    return Task;
}());
exports.default = Task;
