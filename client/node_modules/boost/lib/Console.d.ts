/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
/// <reference types="node" />
import Emitter from './Emitter';
export declare const REFRESH_RATE = 100;
export declare const BG_REFRESH_RATE = 500;
export declare type WrappedStream = (message: string) => void;
export interface ConsoleOptions {
    footer: string;
    header: string;
    level: 0 | 1 | 2 | 3;
    silent: boolean;
    theme: string;
}
export default class Console extends Emitter {
    bufferedOutput: string;
    bufferedStreams: (() => void)[];
    err: WrappedStream;
    errorLogs: string[];
    refreshTimer: NodeJS.Timer | null;
    lastOutputHeight: number;
    logs: string[];
    options: ConsoleOptions;
    out: WrappedStream;
    renderTimer: NodeJS.Timer | null;
    restoreCursorOnExit: boolean;
    constructor(options?: Partial<ConsoleOptions>);
    /**
     * Clear the entire console.
     */
    clearOutput(): this;
    /**
     * Clear defined lines from the console.
     */
    clearLinesOutput(): this;
    /**
     * Display a footer after all final output.
     */
    displayFooter(): void;
    /**
     * Display a header before all final output.
     */
    displayHeader(): void;
    /**
     * Display logs in the final output.
     */
    displayLogs(logs: string[]): void;
    /**
     * Force exit the application.
     */
    exit(message: string | Error | null, code?: number, force?: boolean): void;
    /**
     * Flush buffered output that has been logged.
     */
    flushBufferedOutput(): this;
    /**
     * Flush buffered streams output after clearing lines rendered by the reporter.
     */
    flushBufferedStreams(): this;
    /**
     * Handle uncaught exceptions and unhandled rejections that bubble up.
     */
    handleFailure: (error: Error) => void;
    /**
     * Handle the final render before exiting.
     */
    handleFinalRender: (error?: Error | null) => void;
    /**
     * Handle the entire rendering and flushing process.
     */
    handleRender: (error?: Error | null, final?: boolean) => void;
    /**
     * Handle SIGINT and SIGTERM interruptions.
     */
    handleSignal: () => void;
    /**
     * Hide the console cursor.
     */
    hideCursor(): this;
    /**
     * Store the log message.
     */
    log(message: string): this;
    /**
     * Store the error message.
     */
    logError(message: string): this;
    /**
     * Debounce the render as to avoid tearing.
     */
    render(): this;
    /**
     * Reset the cursor back to the bottom of the console.
     */
    resetCursor(): this;
    /**
     * Reset both the render and background refresh timers.
     */
    resetTimers(): this;
    /**
     * Show the console cursor.
     */
    showCursor(): this;
    /**
     * Automatically refresh in the background if some tasks are taking too long.
     */
    startBackgroundTimer(): void;
    /**
     * Unwrap a stream and reset it back to normal.
     */
    unwrapStream(stream: NodeJS.WriteStream): void;
    /**
     * Wrap a stream and buffer the output as to not collide with our reporter.
     */
    wrapStream(stream: NodeJS.WriteStream): WrappedStream;
    /**
     * Log a message to `stdout` without a trailing newline or formatting.
     */
    write(message: string, nl?: number, prepend?: boolean): this;
}
