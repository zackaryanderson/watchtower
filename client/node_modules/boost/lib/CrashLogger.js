"use strict";
/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-magic-numbers */
var fs_1 = __importDefault(require("fs"));
var util_1 = __importDefault(require("util"));
var path_1 = __importDefault(require("path"));
var execa_1 = __importDefault(require("execa"));
var CrashLogger = /** @class */ (function () {
    function CrashLogger(_a) {
        var config = _a.config, options = _a.options;
        var _this = this;
        this.contents = '';
        this.logPath = path_1.default.join(options.root, options.appName + "-error.log");
        this.add('Node', process.version.slice(1));
        this.add('NPM', String(execa_1.default.shellSync('npm --version').stdout) || '(Not installed)');
        this.add('Yarn', String(execa_1.default.shellSync('yarn --version').stdout) || '(Not installed)');
        this.addTitle('Process');
        this.add('ID', process.pid);
        this.add('Title', process.title);
        this.add('Timestamp', new Date().toISOString());
        this.add('CWD', process.cwd());
        this.add('ARGV', process.argv.join('\n  '));
        this.addTitle('Platform');
        this.add('OS', process.platform);
        this.add('Architecture', process.arch);
        this.add('Uptime (sec)', process.uptime());
        this.add('Memory usage', Math.round((process.memoryUsage().heapUsed / 1024 / 1024) * 100) / 100 + " MB");
        if (process.platform !== 'win32') {
            this.add('Group ID', process.getgid());
            this.add('User ID', process.getuid());
        }
        this.addTitle('Environment');
        Object.keys(process.env).forEach(function (key) {
            _this.add(key, process.env[key]);
        });
        this.addTitle('Tool Instance');
        this.add('App name', options.appName);
        this.add('Plugin alias', options.pluginAlias);
        this.add('Scoped package', util_1.default.inspect(options.scoped));
        this.add('Root', options.root);
        this.add('Configs path', path_1.default.join(options.root, options.configFolder));
        this.add('Package path', path_1.default.join(options.root, 'package.json'));
        this.add('Workspaces root', options.workspaceRoot || '(Not enabled)');
        this.add('Extending configs', config.extends.length > 0 ? util_1.default.inspect(config.extends) : '(Not extending)');
    }
    CrashLogger.prototype.add = function (label, message) {
        this.contents += label + ":\n";
        this.contents += "  " + message + "\n";
    };
    CrashLogger.prototype.addTitle = function (title) {
        this.contents += "\n\n" + title.toUpperCase() + "\n";
        this.contents += '='.repeat(title.length) + "\n\n";
    };
    CrashLogger.prototype.log = function (error) {
        this.addTitle('Stack Trace');
        this.contents += error.stack;
        fs_1.default.writeFileSync(this.logPath, this.contents, 'utf8');
    };
    return CrashLogger;
}());
exports.default = CrashLogger;
