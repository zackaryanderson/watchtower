/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Module from './Module';
import Tool from './Tool';
import { Debugger } from './types';
export declare type Constructor<T> = new (...args: any[]) => T;
export declare type OptionsObject = {
    [key: string]: any;
};
export default class ModuleLoader<Tm extends Module<any>> {
    classReference: Constructor<Tm>;
    debug: Debugger;
    tool: Tool;
    typeName: string;
    constructor(tool: Tool, typeName: string, classReference: Constructor<Tm>);
    /**
     * Import a class definition from a Node module and instantiate the class
     * with the provided options object.
     */
    importModule(name: string, args?: any[]): Tm;
    /**
     * If loading from an object, extract the module name and use the remaining object
     * as options for the class instance.
     */
    importModuleFromOptions(baseOptions: OptionsObject, args?: any[]): Tm;
    /**
     * Load and or instantiate a module for the `typeName` configuration property.
     * If a class instance, use directly. If a string, attempt to load and
     * instantiate from a module. If an object, extract the name and run the previous.
     */
    loadModule(module: string | OptionsObject | Tm, args?: any[]): Tm;
    /**
     * Load multiple modules.
     */
    loadModules(modules?: (string | OptionsObject | Tm)[], args?: any[]): Tm[];
}
