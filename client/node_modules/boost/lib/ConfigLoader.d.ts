/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Tool from './Tool';
import { Debugger, ToolConfig, PackageConfig } from './types';
export declare type ConfigObject = {
    [key: string]: any;
};
export declare type ConfigPathOrObject = string | ConfigObject;
export default class ConfigLoader {
    debug: Debugger;
    package: PackageConfig;
    parsedFiles: {
        [path: string]: boolean;
    };
    tool: Tool;
    workspaceRoot: string;
    constructor(tool: Tool);
    /**
     * Find the config in the package.json block under the application name.
     */
    findConfigInPackageJSON(pkg: PackageConfig): ConfigPathOrObject | null;
    /**
     * Find the config using local files commonly located in a configs/ folder.
     */
    findConfigInLocalFiles(root: string): ConfigPathOrObject | null;
    /**
     * Find the config within the root when in a workspace.
     */
    findConfigInWorkspaceRoot(root: string): ConfigPathOrObject | null;
    /**
     * Handle special cases when merging 2 configuration values.
     * If the target and source are both arrays, concatenate them.
     */
    handleMerge(target: any, source: any): any;
    /**
     * Load a local configuration file relative to the current working directory,
     * or from within a package.json property of the same appName.
     *
     * Support both JSON and JS file formats by globbing the config directory.
     */
    loadConfig(): ToolConfig;
    /**
     * Load the "package.json" from the current working directory,
     * as we require the build tool to be ran from the project root.
     */
    loadPackageJSON(): PackageConfig;
    /**
     * If an `extends` option exists, recursively merge the current configuration
     * with the preset configurations defined within `extends`,
     * and return the new configuration object.
     */
    parseAndExtend(fileOrConfig: ConfigPathOrObject): ConfigObject;
    /**
     * Parse a configuration file at the defined file system path.
     * If the file ends in "json" or "json5", parse it with JSON5.
     * If the file ends in "js", import the file and use the default object.
     * Otherwise throw an error.
     */
    parseFile(filePath: string, args?: any[]): ConfigObject;
    /**
     * Resolve file system paths for the `extends` configuration value
     * using the following guidelines:
     *
     *  - Absolute paths should be normalized and used as is.
     *  - Relative paths should be resolved relative to the CWD.
     *  - Strings that match a node module name should resolve to a config file relative to the CWD.
     *  - Strings that start with "<plugin>:" should adhere to the previous rule.
     */
    resolveExtendPaths(extendPaths: string[], baseDir?: string): string[];
    /**
     * Resolve a Node/NPM module path to an app config file.
     */
    resolveModuleConfigPath(appName: string, moduleName: string, preset?: boolean, ext?: string): string;
}
