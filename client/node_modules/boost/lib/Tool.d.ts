/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import { Blueprint } from 'optimal';
import Console, { ConsoleOptions } from './Console';
import Emitter from './Emitter';
import Plugin from './Plugin';
import Reporter from './Reporter';
import { Debugger, ToolConfig, PackageConfig } from './types';
export interface ToolOptions {
    appName: string;
    configBlueprint: Blueprint;
    configFolder: string;
    console: Partial<ConsoleOptions>;
    pluginAlias: string;
    root: string;
    scoped: boolean;
    workspaceRoot: string;
}
export default class Tool extends Emitter {
    argv: string[];
    config: ToolConfig;
    console: Console;
    debug: Debugger;
    initialized: boolean;
    options: ToolOptions;
    package: PackageConfig;
    plugins: Plugin<any>[];
    reporters: Reporter<any>[];
    constructor(options: Partial<ToolOptions>, argv?: string[]);
    /**
     * Add a reporter and bootstrap with the console instance.
     */
    addReporter(reporter: Reporter<any>): this;
    /**
     * Create a debugger with a namespace.
     */
    createDebugger(...namespaces: string[]): Debugger;
    /**
     * Force exit the application.
     */
    exit(message: string | Error | null, code?: number): this;
    /**
     * Get a plugin by name.
     */
    getPlugin(name: string): Plugin<any>;
    /**
     * Get a reporter by name.
     */
    getReporter(name: string): Reporter<any>;
    /**
     * Return a list of all theme names.
     */
    getThemeList(): string[];
    /**
     * Initialize the tool by loading config and plugins.
     */
    initialize(): this;
    /**
     * Load the package.json and local configuration files.
     *
     * Must be called first in the lifecycle.
     */
    loadConfig(): this;
    /**
     * Register plugins from the loaded configuration.
     *
     * Must be called after config has been loaded.
     */
    loadPlugins(): this;
    /**
     * Register reporters from the loaded configuration.
     *
     * Must be called after config has been loaded.
     */
    loadReporters(): this;
    /**
     * Log a message to the console to display on success.
     */
    log(message: string, ...args: any[]): this;
    /**
     * Log an error to the console to display on failure.
     */
    logError(message: string, ...args: any[]): this;
}
