"use strict";
/**
 * @copyright   2017-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-param-reassign */
var util_1 = __importDefault(require("util"));
var chalk_1 = __importDefault(require("chalk"));
var debug_1 = __importDefault(require("debug"));
var pluralize_1 = __importDefault(require("pluralize"));
var optimal_1 = __importStar(require("optimal"));
var ConfigLoader_1 = __importDefault(require("./ConfigLoader"));
var Console_1 = __importDefault(require("./Console"));
var Emitter_1 = __importDefault(require("./Emitter"));
var ModuleLoader_1 = __importDefault(require("./ModuleLoader"));
var Plugin_1 = __importDefault(require("./Plugin"));
var Reporter_1 = __importDefault(require("./Reporter"));
var DefaultReporter_1 = __importDefault(require("./reporters/DefaultReporter"));
var ErrorReporter_1 = __importDefault(require("./reporters/ErrorReporter"));
var enableDebug_1 = __importDefault(require("./helpers/enableDebug"));
var isEmptyObject_1 = __importDefault(require("./helpers/isEmptyObject"));
var themes_1 = __importDefault(require("./themes"));
var constants_1 = require("./constants");
var CIReporter_1 = __importDefault(require("./reporters/CIReporter"));
var Tool = /** @class */ (function (_super) {
    __extends(Tool, _super);
    function Tool(options, argv) {
        if (argv === void 0) { argv = []; }
        var _this = _super.call(this) || this;
        _this.argv = [];
        _this.config = __assign({}, constants_1.DEFAULT_TOOL_CONFIG);
        _this.initialized = false;
        _this.package = { name: '' };
        _this.plugins = [];
        _this.reporters = [];
        _this.argv = argv;
        _this.options = optimal_1.default(options, {
            appName: optimal_1.string().required(),
            configBlueprint: optimal_1.object(),
            configFolder: optimal_1.string('./configs'),
            console: optimal_1.object(),
            pluginAlias: optimal_1.string('plugin'),
            root: optimal_1.string(process.cwd()),
            scoped: optimal_1.bool(),
            workspaceRoot: optimal_1.string().empty(),
        }, {
            name: 'Tool',
        });
        // Enable debugging as early as possible
        if (argv.includes('--debug')) {
            enableDebug_1.default(_this.options.appName);
        }
        // Core debugger for the entire tool
        _this.debug = _this.createDebugger('core');
        // Initialize the console first so we can start logging
        _this.console = new Console_1.default(_this.options.console);
        // Add a reporter to catch errors during initialization
        _this.addReporter(new ErrorReporter_1.default());
        // Cleanup when an exit occurs
        /* istanbul ignore next */
        if (process.env.NODE_ENV !== 'test') {
            process.on('exit', function (code) {
                _this.emit('exit', [code]);
            });
        }
        // eslint-disable-next-line global-require
        _this.debug('Using boost v%s', require('../package.json').version);
        return _this;
    }
    /**
     * Add a reporter and bootstrap with the console instance.
     */
    Tool.prototype.addReporter = function (reporter) {
        reporter.console = this.console;
        reporter.bootstrap();
        this.reporters.push(reporter);
        return this;
    };
    /**
     * Create a debugger with a namespace.
     */
    Tool.prototype.createDebugger = function () {
        var namespaces = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            namespaces[_i] = arguments[_i];
        }
        var handler = debug_1.default(this.options.appName + ":" + namespaces.join(':'));
        handler.invariant = function (condition, message, pass, fail) {
            handler('%s: %s', message, condition ? chalk_1.default.green(pass) : chalk_1.default.red(fail));
        };
        return handler;
    };
    /**
     * Force exit the application.
     */
    Tool.prototype.exit = function (message, code) {
        if (code === void 0) { code = 1; }
        this.console.exit(message, code);
        return this;
    };
    /**
     * Get a plugin by name.
     */
    Tool.prototype.getPlugin = function (name) {
        var plugin = this.plugins.find(function (p) { return p.name === name; });
        if (plugin) {
            return plugin;
        }
        throw new Error("Failed to find " + this.options.pluginAlias + " \"" + name + "\". Have you installed it?");
    };
    /**
     * Get a reporter by name.
     */
    Tool.prototype.getReporter = function (name) {
        var reporter = this.reporters.find(function (p) { return p.name === name; });
        if (reporter) {
            return reporter;
        }
        throw new Error("Failed to find reporter \"" + name + "\". Have you installed it?");
    };
    /**
     * Return a list of all theme names.
     */
    Tool.prototype.getThemeList = function () {
        return Object.keys(themes_1.default);
    };
    /**
     * Initialize the tool by loading config and plugins.
     */
    Tool.prototype.initialize = function () {
        if (this.initialized) {
            return this;
        }
        var appName = this.options.appName;
        this.debug('Initializing %s', chalk_1.default.green(appName));
        this.loadConfig();
        this.loadPlugins();
        this.loadReporters();
        this.initialized = true;
        return this;
    };
    /**
     * Load the package.json and local configuration files.
     *
     * Must be called first in the lifecycle.
     */
    Tool.prototype.loadConfig = function () {
        var _this = this;
        if (this.initialized) {
            return this;
        }
        var configLoader = new ConfigLoader_1.default(this);
        this.package = configLoader.loadPackageJSON();
        this.config = configLoader.loadConfig();
        // Inherit workspace metadata if found
        this.options.workspaceRoot = configLoader.workspaceRoot;
        // Inherit from argv
        this.argv.forEach(function (arg) {
            if (arg === '--debug') {
                var name_1 = arg.slice(2);
                _this.config[name_1] = true;
            }
        });
        // Enable debugging if defined in the config
        // This happens a little too late, but oh well
        if (this.config.debug) {
            enableDebug_1.default(this.options.appName);
        }
        return this;
    };
    /**
     * Register plugins from the loaded configuration.
     *
     * Must be called after config has been loaded.
     */
    Tool.prototype.loadPlugins = function () {
        var _this = this;
        if (this.initialized) {
            return this;
        }
        var pluginAlias = this.options.pluginAlias;
        var pluralPluginAlias = pluralize_1.default(pluginAlias);
        if (isEmptyObject_1.default(this.config)) {
            throw new Error("Cannot load " + pluralPluginAlias + " as configuration has not been loaded.");
        }
        var loader = new ModuleLoader_1.default(this, pluginAlias, Plugin_1.default);
        this.plugins = loader.loadModules(this.config[pluralPluginAlias]);
        // Sort plugins by priority
        this.plugins.sort(function (a, b) { return a.priority - b.priority; });
        // Bootstrap each plugin with the tool
        this.plugins.forEach(function (plugin) {
            plugin.tool = _this;
            plugin.bootstrap();
        });
        return this;
    };
    /**
     * Register reporters from the loaded configuration.
     *
     * Must be called after config has been loaded.
     */
    Tool.prototype.loadReporters = function () {
        var _this = this;
        if (this.initialized) {
            return this;
        }
        if (isEmptyObject_1.default(this.config)) {
            throw new Error('Cannot load reporters as configuration has not been loaded.');
        }
        var loader = new ModuleLoader_1.default(this, 'reporter', Reporter_1.default);
        var reporters = [];
        if (process.env.CI && !process.env.BOOST_ENV) {
            loader.debug('CI environment detected, using %s CI reporter', chalk_1.default.yellow('boost'));
            reporters.push(new CIReporter_1.default());
        }
        else {
            reporters.push.apply(reporters, loader.loadModules(this.config.reporters));
        }
        // Use default reporter
        if (reporters.length === 0) {
            loader.debug('Using default %s reporter', chalk_1.default.yellow('boost'));
            reporters.push(new DefaultReporter_1.default());
        }
        // Bootstrap each plugin with the tool
        loader.debug('Bootstrapping reporters with console environment');
        reporters.forEach(function (reporter) {
            _this.addReporter(reporter);
        });
        return this;
    };
    /**
     * Log a message to the console to display on success.
     */
    Tool.prototype.log = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.console.log(util_1.default.format.apply(util_1.default, [message].concat(args)));
        return this;
    };
    /**
     * Log an error to the console to display on failure.
     */
    Tool.prototype.logError = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.console.logError(util_1.default.format.apply(util_1.default, [message].concat(args)));
        return this;
    };
    return Tool;
}(Emitter_1.default));
exports.default = Tool;
